apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: go-rest-backend
  title: go rest api backend
  description: Create a rest api backend in go with CICD pipeline 
  tags:
  - go
  - api
  - microservice
  - recommended
spec:
    owner: rgopinat@redhat.com
    type: service

    parameters:
    - title: Provide information about the service
      properties:
        orgName:
            title: GitHub Org
            type: string
        repoName: 
            title: Repository Name
            type: string
        repoVisibility:
          title: Repo visibility
          type: string
          default: public
          enum:
            - public
            - private
            - internal
        description: 
            title: Description
            type: string
            description: Provide a description which will help others understand what this component is for
        owner:
            title: Owner
            type: string
            ui:field: EntityPicker
            ui:options:
              catalogFilter:
                kind:
                  - Group
                  - User
        port:
            title: Port
            type: number
            default: 8080
            description: port at which the server is going to listen for HTTP requests
        host:
          title: host
          type: string
          description: host URL
        ingress:
          title: ingress class
          type: string
          description: Ingress classname
          default: haproxy
          enum:
            - haproxy
            - nginx
          enumNames:
            - HA Proxy
            - NGINX
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
        dependsOn:
          title: depends on
          type: string
          description: "Component that this component depends on"
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: [Resource]
        partOf:
          title: part of
          type: string
          description: domain that this component is part of
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Domain
        providesApis:
          title: Apis provided by this component
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: [API]
        consumesApis:
          title: Apis consumed by this component
          type: array
          items:
            type: string
            ui:field: EntityPicker
            ui:options:
              catalogFilter:
                kind: [API]
      required:
      - system
      - orgName
      - repoName
      - owner
      - port
      - providesApis
    - title: Provide information about Sonarqube Instance
      properties:
        sonarHost:
          title: Sonar Host Url
          type: string
        sonarOrg:
          title: Sonar Organization
        required:
        - sonarHost
        - sonarOrg
    - title: Provide Information about deployment targets 
      properties:
        namespace:
          title: k8s Namespace
          type: string 
      required:
      - namespace
    steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          sourceControl: github.com
          port: ${{ parameters.port }}          
    
    - id: ciTemplate
      name: Generating the CI Component
      action: fetch:template
      input:
        url: ../../skeletons/github-actions/
        copyWithoutTemplating:
        - .github/workflows/
        values: {}

    - id: deployManifests
      name: "Generating deployment manifests"
      action: fetch:template
      input:
        url: ../../skeletons/kustomize
        targetPath: deploy/k8s
        values:
          repoName: ${{ parameters.repoName }}
          imageRegistry: ghcr.io
          orgName: ${{ parameters.orgName }}
          port: ${{ parameters.port }}
          host: ${{ parameters.host }}
          ingressClassName: ${{ parameters.ingress }}
    
    - id: gitOpsTemplate
      name: "Generating ArgoCD applicationset definition"
      action: fetch:template
      input:
        targetPath: deploy/gitops
        url: ../../skeletons/gitops/
        values:
          repoName: ${{ parameters.repoName }}
          environment: dev
          sourceControl: github.com
          orgName: ${{ parameters.orgName }}
          namespace: ${{ parameters.namespace }}

    - id: docsTemplate
      name: Generating docs files
      action: fetch:template
      input:
        url: ../../skeletons/techdocs/
        values:
          name: ${{ parameters.repoName }}
          description: ${{ parameters.description }}

    - id: sonarqubeTemplate
      name: Generating Sonarqube properties file
      action: fetch:template
      input:
        url: ../../skeletons/sonarqube
        values:
          sonarhost: ${{ parameters.sonarHost }}
          sonarorg: ${{ parameters.sonarOrg }}
          projectKey: ${{ parameters.repoName }}
          projectName: ${{ parameters.repoName }}
          sourceDir: source
          language: go

    - id: catalogTemplate
      name: Generating the Catalog Info Component
      action: fetch:template
      input:
        url: ../../skeletons/catalog-info/
        values:
          entityKind: Component
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: service
          description: ${{ parameters.description }}
          lifecycle: experimental
          dependsOn: ${{ parameters.dependsOn }}
          partOf: ${{ parameters.partOf }}
          providesApis: ${{ parameters.providesApis }}
          consumesApis: ${{ parameters.consumesApis }}

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        repoVisibility: ${{ parameters.repoVisibility }}
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}
        defaultBranch: main
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        
    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

    output:
      links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}